name: "Try_to_compile_with_cmake"

on:
  workflow_dispatch:

  push:
    branches: [ "main" ]

  pull_request:
    branches: [ "main" ]

env:
  CONFIGURATION: Release
  PLATFORM: x64
  BOOST_VERSION: '1.8.3'


jobs:
  build_and_upload_installer:
    name: Try to compile on windows
    runs-on: windows-2022
    outputs:
      installer_file_name: ${{ steps.output_installer_file_name.outputs.name }}
    steps:
    - uses: actions/checkout@v4




    - name: 'Add "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\bin" to path'
      shell: bash
      run: echo "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\bin" >> $GITHUB_PATH

    - name: Deploy Advinst
      uses: caphyon/advinst-github-action@v1.1
      with:
        advinst-version: '21.3'

        # advinst-license: ${{ secrets.ADVINST_LICENSE_KEY }}
        # " advinst-license
        # Advanced Installer license ID. This parameter is optional if you are using a simple project type.
        # "

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2

    # - name: Integrate vcpkg with Visual Studio
    #   run: vcpkg integrate install




    # - name: Restore vcpkg Deps
    #   id: cache-vcpkg-deps-restore
    #   uses: actions/cache/restore@v4
    #   with:
    #     path: |
    #       C:\vcpkg\packages\
    #       D:\a\sdna_plus\sdna_plus\vcpkg_installed\
    #     key: ${{ runner.os }}-${{ hashFiles('vcpkg.json') }}

    # Let vcpkg do its thing with the cache and don't skip this step
    # if there is a cache hit. Vcpkg will detect pre existing files.
    # that it previously installed.
    # - name: Install Boost from vcpkg.json
    #   run: vcpkg install


    # - name: Cache vcpkg Deps
    #   if: steps.cache-vcpkg-deps-restore.outputs.cache-hit != 'true'
    #   id: cache-deps-save
    #   uses: actions/cache/save@v4
    #   with:
    #     path: |
    #       C:\vcpkg\packages\
    #       D:\a\sdna_plus\sdna_plus\vcpkg_installed\
    #     key: ${{ steps.cache-vcpkg-deps-restore.outputs.cache-primary-key }}


    - name: Test CMake generator
      working-directory: ${{ github.workspace }}\sDNA\sdna_vs2008
      run: > 
        cmake -G "Visual Studio 17 2022" -A x64

    - name: Output the name of the .msi installer file
      id: output_installer_file_name
      shell: bash
      run: echo "name=$(ls sDNA_setup_win_v*.msi)" >> "$GITHUB_OUTPUT"  

    - name: upload output dir
      id: installer-upload-step
      uses: actions/upload-artifact@v4
      with:
        name: CMake_generated
        path: ${{ github.workspace }}\sDNA\sdna_vs2008
        # name: installer_file
        # this file name pattern is defined in installerbits\rename_version.py
        # outfilename = os.path.join(outputdir, "sDNA_setup_win_v%s.msi" % filename_friendly_version)
        # path: sDNA_setup_win_v*.msi

      