name: test_an_msi_from_the_releases_page

on:  
  push:
    branches: ["main"]
  workflow_call:

  workflow_dispatch:
    

env:
  VERSION: 4_1_1

  DOWNLOAD_URL_PREFIX: https://sdna.cardiff.ac.uk/sdna/wp-content/downloads/sDNA_setup_win_v
#                e.g.: https://sdna.cardiff.ac.uk/sdna/wp-content/downloads/sDNA_setup_win_v4_1_1.msi
#                  or: https://sdna.cardiff.ac.uk/sdna/wp-content/downloads/old%20versions/sDNA_setup_win_v3_4_5.msi



jobs:

  download_install_and_test_sDNA_msi:    

    strategy:
      fail-fast: false
      matrix:
        python_version: ['2.7',  '3.7', '3.8', '3.9', '3.10', '3.11', '3.12'] #'3.0', '3.1', '3.2', '3.3', '3.4', '3.5', '3.6',

    name: "Download and install a release of sDNA, and run diff tests on it. "
    
    runs-on: windows-2022
    # Note:  The Windows server 2022 Github runner image already includes  
    # Python (currently 6 versions from 3.7 to 3.12) and a couple of 
    # VC++ redistributables.  Desktop users may need to install these 
    # themselves, in addition to sDNA.      
    #
    # https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
    #
    steps:


    - uses: actions/checkout@v4


    # - name: Download and install release of sDNA, then delete installer file.

    #   run: |
    #     Invoke-WebRequest ${{ env.DOWNLOAD_URL_PREFIX }}${{ env.VERSION }}.msi -OutFile sDNA_setup_win_v${{ env.VERSION }}.msi
    #
    #     # This command is all that is required to successfully run the sDNA installer
    #     # on desktop Windows 11, silently.  Sadly it is not also sufficient on 
    #     # the Github Actions Windows runner image (I know not why): 
    #     .\sDNA_setup_win_v${{ env.VERSION }}.msi /passive
    #
    #     Remove-Item .\sDNA_setup_win_v${{ env.VERSION }}.msi

    - name: Install sDNA using powershell script. 
      # This is @Simran-B's powershell script (from Github Community forum),
      # according to GuiFalourd on Stack Overflow
      # https://stackoverflow.com/a/72291019/20785734
      run: |
        $file = "sDNA_setup_win_v${{ env.VERSION }}.msi"
        Invoke-WebRequest ${{ env.DOWNLOAD_URL_PREFIX }}${{ env.VERSION }}.msi -OutFile $file
        $log = "install.log" 
        $procMain = Start-Process "msiexec" "/i `"$file`" /qn /l*! `"$log`"" -NoNewWindow -PassThru
        $procLog = Start-Process "powershell" "Get-Content -Path `"$log`" -Wait" -NoNewWindow -PassThru 
        $procMain.WaitForExit() 
        $procLog.Kill()
        Remove-Item $file




    - uses: LizardByte/setup-python-action@master
      with:
        python-version: ${{ matrix.python_version }}

    - name: Install Pytest, and Numpy (the latter for sDNA Learn & Predict).
      working-directory: .\sDNA\sdna_vs2008\tests\pytest
      run: pip install pytest numpy

    - name: Show versions.
      working-directory: '.\sDNA\sdna_vs2008\tests\pytest'
      run: |
        python --version
        python -c "import numpy; print('Numpy: %s' % numpy.__version__)"
        python -m pytest --version

      # TODO: This is an unrepresentative test. As the 
      # sdna_vs2008.dll binary
      # being tested is from the releases downloads page, but the sDNA Python
      # glue code being tested, is from the source code repo.
    
      # For the current question (of formally supporting Python 3, as well 
      # as Python 2), this is fine until the C++ code is changed.  But should be
      # addressed before this testing approach is relied on further.  
      # 
      # The test
      # directory probably just needs to be copied from the repo, into the sDNA
      # installation to be tested's tree, and pytest run from there.  Or allow
      # "..\..\..\arcscripts" to be replaced by an environment variable, pointing
      # to the corresponsing directory of the sDNA installation to be tested.
      
    # - name: Run debug_test.py directly.
    #   shell: cmd
    #   working-directory: '.\sDNA\sdna_vs2008\tests'
    #   # run: python -u debug_test.py
    #   run: set "sdnadll=c:\Program Files (x86)\sDNA\x64\sdna_vs2008.dll" & python -u debug_test.py

    # - name: Run diff test number 0 directly via
    #   test_gathering_windows_command_line_tests.py, by test index
    #   working-directory: '.\sDNA\sdna_vs2008\tests\pytest'
    #   run: python test_gathering_windows_command_line_tests.py 0

    - name: Run all the diff tests with Pytest.
      shell: cmd
      working-directory: .\sDNA\sdna_vs2008\tests\pytest
      run: set DONT_TEST_ONE_LINK_SUBSYSTEMS_ORDER=1 & pytest -rA
      # -rA shows summary of tests, one per line, even when they all pass.
        
  