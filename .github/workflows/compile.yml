name: "Compile with MSBuild and VS 2022 for Windows"

on:
  workflow_dispatch:
  # push:
  #   branches: [ "main" ]

  # pull_request:
  #   branches: [ "main" ]

env:
  CONFIGURATION: Release
  PLATFORM: x64
  OSGEO4W_GEOS_URL: https://download.osgeo.org/osgeo4w/v2/x86_64/release/geos
  GEOS_VERSION: '3.12.0-1'
  RELEASE: '6.2.1'
  BOOST_VERSION: '1.8.3'


jobs:
  compile:
    name: Try to compile on windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4




    - name: 'Add "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\bin" to path'
      shell: bash
      run: echo "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\bin" >> $GITHUB_PATH

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    - name: Integrate vcpkg with Visual Studio
      run: vcpkg integrate install


    - name: Restore Cache'd Geos binary
      id: cache-geos-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          ${{ github.workspace }}\output\${{ env.CONFIGURATION }}\${{ env.PLATFORM }}\geos_c.dll
        key: ${{ runner.os }}-geos_v${{ env.GEOS_VERSION }}

    - name: Download and unzip Geos binary from OSGEO
      if: steps.cache-geos-restore.outputs.cache-hit != 'true'
      shell: bash
      run: |
        GEOS_FILE=geos-${{ env.GEOS_VERSION }}.tar.bz2
        curl -L -o $GEOS_FILE ${{ env.OSGEO4W_GEOS_URL }}/$GEOS_FILE
        tar -xf $GEOS_FILE
        BUILD_CONFIG=${{ env.CONFIGURATION }}
        mv bin/geos_c.dll $GITHUB_WORKSPACE/output/${BUILD_CONFIG,R}/${{ env.PLATFORM }}
      # ${BUILD_CONFIG,R} Tries to make first letter of BUILD_CONFIG lowercase only if it is an R
      # as the sDNA source tree has output/Debug
      #                             output/release
      # But the corresponding supported configs are Debug and Release

    - name: Cache Geos binary
      if: steps.cache-geos-restore.outputs.cache-hit != 'true'
      id: cache-geos-save
      uses: actions/cache/save@v3
      with:
        path: |
          ${{ github.workspace }}\output\${{ env.CONFIGURATION }}\${{ env.PLATFORM }}\geos_c.dll
        key: ${{ steps.cache-geos-restore.outputs.cache-primary-key }}

    - name: Restore vcpkg Deps
      id: cache-vcpkg-deps-restore
      uses: actions/cache/restore@v3
      with:
        path: |
          C:\vcpkg\packages\
          D:\a\sdna_plus\sdna_plus\vcpkg_installed\
        key: ${{ runner.os }}-${{ hashFiles('vcpkg.json') }}

    # Let vcpkg do its thing with the cache and don't skip this step
    # if there is a cache hit. Vcpkg will detect pre existing files.
    # that it previously installed.
    - name: Install Boost from vcpkg.json
      run: vcpkg install


    - name: Cache vcpkg Deps
      if: steps.cache-vcpkg-deps-restore.outputs.cache-hit != 'true'
      id: cache-deps-save
      uses: actions/cache/save@v3
      with:
        path: |
          C:\vcpkg\packages\
          D:\a\sdna_plus\sdna_plus\vcpkg_installed\
        key: ${{ steps.cache-vcpkg-deps-restore.outputs.cache-primary-key }}


    - name: Build sDNA
      working-directory: ${{ github.workspace }}
      run: > 
        msbuild build_installer.proj 
        /t:rebuild 
        /p:Platform=${{ env.PLATFORM }}  
        /p:Configuration=${{ env.CONFIGURATION }} 
        /p:VcpkgEnableManifest=true

    # - name: Package sDNA
    #   shell: cmd
    #   run: |
    #     mkdir release_zip_files_dir
    #     cd release_zip_files_dir
    #     ..\package_release.bat

    - name: upload output dir
      uses: actions/upload-artifact@v3
      with:
        name: sDNA_lite_v${{ env.RELEASE }}_${{ env.PLATFORM }}_${{ env.CONFIGURATION }}_osgeo4w_geos_v${{ env.GEOS_VERSION }}_Boost_v${{ env.BOOST_VERSION }}_RTTI_on
        # path: output/release
        path: output/release


