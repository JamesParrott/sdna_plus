name: "Compile with MSBuild and VS 2022 for Windows, and test"

on:
  workflow_dispatch:
  push:
    branches: [ "Test_if_Geos_binary_still_needs_to_be_downloaded" ]

  pull_request:
    branches: [ "Test_if_Geos_binary_still_needs_to_be_downloaded" ]

env:
  CONFIGURATION: Release
  PLATFORM: x64
  OSGEO4W_GEOS_URL: https://download.osgeo.org/osgeo4w/v2/x86_64/release/geos
  GEOS_VERSION: '3.12.0-1'
  BOOST_VERSION: '1.8.3'


jobs:
  build_and_upload_installer:
    name: Try to compile on windows
    runs-on: windows-2022
    outputs:
      installer_file_name: ${{ steps.output_installer_file_name.outputs.name }}
    steps:
    - uses: actions/checkout@v4




    - name: 'Add "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\bin" to path'
      shell: bash
      run: echo "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\bin" >> $GITHUB_PATH

    - name: Deploy Advinst
      uses: caphyon/advinst-github-action@v1.1
      with:
        advinst-version: '21.3'

        # advinst-license: ${{ secrets.ADVINST_LICENSE_KEY }}
        # " advinst-license
        # Advanced Installer license ID. This parameter is optional if you are using a simple project type.
        # "

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Integrate vcpkg with Visual Studio
      run: vcpkg integrate install




    - name: Restore vcpkg Deps
      id: cache-vcpkg-deps-restore
      uses: actions/cache/restore@v4
      with:
        path: |
          C:\vcpkg\packages\
          D:\a\sdna_plus\sdna_plus\vcpkg_installed\
        key: ${{ runner.os }}-${{ hashFiles('vcpkg.json') }}

    # Let vcpkg do its thing with the cache and don't skip this step
    # if there is a cache hit. Vcpkg will detect pre existing files.
    # that it previously installed.
    - name: Install Boost from vcpkg.json
      run: vcpkg install


    - name: Cache vcpkg Deps
      if: steps.cache-vcpkg-deps-restore.outputs.cache-hit != 'true'
      id: cache-deps-save
      uses: actions/cache/save@v4
      with:
        path: |
          C:\vcpkg\packages\
          D:\a\sdna_plus\sdna_plus\vcpkg_installed\
        key: ${{ steps.cache-vcpkg-deps-restore.outputs.cache-primary-key }}


    - name: Build sDNA
      working-directory: ${{ github.workspace }}
      run: > 
        msbuild build_installer.proj 
        /t:rebuild 
        /p:Platform=${{ env.PLATFORM }}  
        /p:Configuration=${{ env.CONFIGURATION }} 
        /p:VcpkgEnableManifest=true

    - name: Output the name of the .msi installer file
      id: output_installer_file_name
      shell: bash
      run: echo "name=$(ls sDNA_setup_win_v*.msi)" >> "$GITHUB_OUTPUT"  

    - name: upload output dir
      id: installer-upload-step
      uses: actions/upload-artifact@v4
      with:
        name: installer_file
        # this file name pattern is defined in installerbits\rename_version.py
        # outfilename = os.path.join(outputdir, "sDNA_setup_win_v%s.msi" % filename_friendly_version)
        path: sDNA_setup_win_v*.msi

      

  test_installer:

    needs: build_and_upload_installer

    strategy:
      fail-fast: false
      matrix:
        python_version: ['2.7', '3.5', '3.6', '3.7', '3.8', '3.9', '3.10', '3.11', '3.12', '3.13']

    name: "Download and run sDNA installer, and run diff tests on it. "
    
    runs-on: windows-2022
    # Note:  The Windows server 2022 Github runner image already includes  
    # Python (currently 6 versions from 3.7 to 3.12) and a couple of 
    # VC++ redistributables.  Desktop users may need to install these 
    # themselves, in addition to sDNA.      
    #
    # https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
    #

    env:
      installer_file_name: ${{ needs.build_and_upload_installer.outputs.installer_file_name }}

    steps:


    - uses: actions/checkout@v4

    - name: Download installer built in previous job
      uses: actions/download-artifact@v4
      with:
        name: installer_file

    - shell: cmd
      run: dir .


    - name: Allow .msi to be executed
      run: Set-ItemProperty -Path ${{ env.installer_file_name }} -Name IsReadOnly -Value $false

    # - name: Download and install release of sDNA, then delete installer file.

    #   run: |
    #     Invoke-WebRequest ${{ env.DOWNLOAD_URL_PREFIX }}${{ env.VERSION }}.msi -OutFile sDNA_setup_win_v${{ env.VERSION }}.msi
    #
    #     # This command is all that is required to successfully run the sDNA installer
    #     # on desktop Windows 11, silently.  Sadly it is not also sufficient on 
    #     # the Github Actions Windows runner image (I know not why): 
    #     .\sDNA_setup_win_v${{ env.VERSION }}.msi /passive
    #
    #     Remove-Item .\sDNA_setup_win_v${{ env.VERSION }}.msi

    - name: Run sDNA installer using powershell script. 
      # This is based on @Simran-B's powershell script (from Github Community forum),
      # according to GuiFalourd on Stack Overflow
      # https://stackoverflow.com/a/72291019/20785734
        # $file = sDNA_setup_win_v4_1_1.msi
      run: |
        $file = "${{ env.installer_file_name }}"
        $log = "install.log" 
        $procMain = Start-Process "msiexec" "/i `"$file`" /qn /l*! `"$log`"" -NoNewWindow -PassThru
        $procLog = Start-Process "powershell" "Get-Content -Path `"$log`" -Wait" -NoNewWindow -PassThru 
        $procMain.WaitForExit() 
        $procLog.Kill()
        Remove-Item $file

    - name: Run regression tests
      uses: ./.github/actions/run_regression_tests
      with:
        python_version: ${{ matrix.python_version }}
        DONT_TEST_N_LINK_SUBSYSTEMS_ORDER: 1
        sdnadll: 'c:\Program Files (x86)\sDNA\x64\sdna_vs2008.dll'
        sdna_debug: ""